/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.FileSharedLink;
import ch.cyberduck.core.box.io.swagger.client.model.FileVersion;
import ch.cyberduck.core.box.io.swagger.client.model.Folder;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * A standard representation of a file, as returned from any file API endpoints by default
 */
@Schema(description = "A standard representation of a file, as returned from any file API endpoints by default")

public class File {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("etag")
  private String etag = null;

  /**
   * &#x60;file&#x60;
   */
  public enum TypeEnum {
    FILE("file");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("size")
  private Long size = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("modified_at")
  private DateTime modifiedAt = null;

  @JsonProperty("trashed_at")
  private DateTime trashedAt = null;

  @JsonProperty("purged_at")
  private DateTime purgedAt = null;

  @JsonProperty("content_created_at")
  private DateTime contentCreatedAt = null;

  @JsonProperty("content_modified_at")
  private DateTime contentModifiedAt = null;

  @JsonProperty("shared_link")
  private FileSharedLink sharedLink = null;

  @JsonProperty("parent")
  private Folder parent = null;

  /**
   * Defines if this item has been deleted or not.  * &#x60;active&#x60; when the item has is not in the trash * &#x60;trashed&#x60; when the item has been moved to the trash but not deleted * &#x60;deleted&#x60; when the item has been permanently deleted.
   */
  public enum ItemStatusEnum {
    ACTIVE("active"),
    TRASHED("trashed"),
    DELETED("deleted");

    private String value;

    ItemStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ItemStatusEnum fromValue(String text) {
      for (ItemStatusEnum b : ItemStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("item_status")
  private ItemStatusEnum itemStatus = null;

  @JsonProperty("sequence_id")
  private String sequenceId = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("sha1")
  private String sha1 = null;

  @JsonProperty("file_version")
  private FileVersion fileVersion = null;

  @JsonProperty("version_number")
  private String versionNumber = null;

  @JsonProperty("comment_count")
  private Integer commentCount = null;

  @JsonProperty("extension")
  private String extension = null;

  @JsonProperty("is_package")
  private Boolean isPackage = null;

  @JsonProperty("expires_at")
  private DateTime expiresAt = null;

  public File id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier that represent a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
   * @return id
  **/
  @Schema(example = "12345", description = "The unique identifier that represent a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public File etag(String etag) {
    this.etag = etag;
    return this;
  }

   /**
   * The HTTP &#x60;etag&#x60; of this file. This can be used within some API endpoints in the &#x60;If-Match&#x60; and &#x60;If-None-Match&#x60; headers to only perform changes on the file if (no) changes have happened.
   * @return etag
  **/
  @Schema(example = "1", description = "The HTTP `etag` of this file. This can be used within some API endpoints in the `If-Match` and `If-None-Match` headers to only perform changes on the file if (no) changes have happened.")
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }

  public File type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * &#x60;file&#x60;
   * @return type
  **/
  @Schema(example = "file", description = "`file`")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public File description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The optional description of this file
   * @return description
  **/
  @Schema(example = "Contract for Q1 renewal", description = "The optional description of this file")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public File size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * The file size in bytes. Be careful parsing this integer as it can get very large and cause an integer overflow.
   * @return size
  **/
  @Schema(example = "629644", description = "The file size in bytes. Be careful parsing this integer as it can get very large and cause an integer overflow.")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public File createdAt(DateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the file was created on Box.
   * @return createdAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date and time when the file was created on Box.")
  public DateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(DateTime createdAt) {
    this.createdAt = createdAt;
  }

  public File modifiedAt(DateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * The date and time when the file was last updated on Box.
   * @return modifiedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date and time when the file was last updated on Box.")
  public DateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(DateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }

  public File trashedAt(DateTime trashedAt) {
    this.trashedAt = trashedAt;
    return this;
  }

   /**
   * The time at which this file was put in the trash.
   * @return trashedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The time at which this file was put in the trash.")
  public DateTime getTrashedAt() {
    return trashedAt;
  }

  public void setTrashedAt(DateTime trashedAt) {
    this.trashedAt = trashedAt;
  }

  public File purgedAt(DateTime purgedAt) {
    this.purgedAt = purgedAt;
    return this;
  }

   /**
   * The time at which this file is expected to be purged from the trash.
   * @return purgedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The time at which this file is expected to be purged from the trash.")
  public DateTime getPurgedAt() {
    return purgedAt;
  }

  public void setPurgedAt(DateTime purgedAt) {
    this.purgedAt = purgedAt;
  }

  public File contentCreatedAt(DateTime contentCreatedAt) {
    this.contentCreatedAt = contentCreatedAt;
    return this;
  }

   /**
   * The date and time at which this file was originally created, which might be before it was uploaded to Box.
   * @return contentCreatedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date and time at which this file was originally created, which might be before it was uploaded to Box.")
  public DateTime getContentCreatedAt() {
    return contentCreatedAt;
  }

  public void setContentCreatedAt(DateTime contentCreatedAt) {
    this.contentCreatedAt = contentCreatedAt;
  }

  public File contentModifiedAt(DateTime contentModifiedAt) {
    this.contentModifiedAt = contentModifiedAt;
    return this;
  }

   /**
   * The date and time at which this file was last updated, which might be before it was uploaded to Box.
   * @return contentModifiedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date and time at which this file was last updated, which might be before it was uploaded to Box.")
  public DateTime getContentModifiedAt() {
    return contentModifiedAt;
  }

  public void setContentModifiedAt(DateTime contentModifiedAt) {
    this.contentModifiedAt = contentModifiedAt;
  }

  public File sharedLink(FileSharedLink sharedLink) {
    this.sharedLink = sharedLink;
    return this;
  }

   /**
   * Get sharedLink
   * @return sharedLink
  **/
  @Schema(description = "")
  public FileSharedLink getSharedLink() {
    return sharedLink;
  }

  public void setSharedLink(FileSharedLink sharedLink) {
    this.sharedLink = sharedLink;
  }

  public File parent(Folder parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @Schema(description = "")
  public Folder getParent() {
    return parent;
  }

  public void setParent(Folder parent) {
    this.parent = parent;
  }

  public File itemStatus(ItemStatusEnum itemStatus) {
    this.itemStatus = itemStatus;
    return this;
  }

   /**
   * Defines if this item has been deleted or not.  * &#x60;active&#x60; when the item has is not in the trash * &#x60;trashed&#x60; when the item has been moved to the trash but not deleted * &#x60;deleted&#x60; when the item has been permanently deleted.
   * @return itemStatus
  **/
  @Schema(example = "active", description = "Defines if this item has been deleted or not.  * `active` when the item has is not in the trash * `trashed` when the item has been moved to the trash but not deleted * `deleted` when the item has been permanently deleted.")
  public ItemStatusEnum getItemStatus() {
    return itemStatus;
  }

  public void setItemStatus(ItemStatusEnum itemStatus) {
    this.itemStatus = itemStatus;
  }

  public File sequenceId(String sequenceId) {
    this.sequenceId = sequenceId;
    return this;
  }

   /**
   * A numeric identifier that represents the most recent user event that has been applied to this item.  This can be used in combination with the &#x60;GET /events&#x60;-endpoint to filter out user events that would have occurred before this identifier was read.  An example would be where a Box Drive-like application would fetch an item via the API, and then listen to incoming user events for changes to the item. The application would ignore any user events where the &#x60;sequence_id&#x60; in the event is smaller than or equal to the &#x60;sequence_id&#x60; in the originally fetched resource.
   * @return sequenceId
  **/
  @Schema(example = "3", description = "A numeric identifier that represents the most recent user event that has been applied to this item.  This can be used in combination with the `GET /events`-endpoint to filter out user events that would have occurred before this identifier was read.  An example would be where a Box Drive-like application would fetch an item via the API, and then listen to incoming user events for changes to the item. The application would ignore any user events where the `sequence_id` in the event is smaller than or equal to the `sequence_id` in the originally fetched resource.")
  public String getSequenceId() {
    return sequenceId;
  }

  public void setSequenceId(String sequenceId) {
    this.sequenceId = sequenceId;
  }

  public File name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the file
   * @return name
  **/
  @Schema(example = "Contract.pdf", description = "The name of the file")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public File sha1(String sha1) {
    this.sha1 = sha1;
    return this;
  }

   /**
   * The SHA1 hash of the file. This can be used to compare the contents of a file on Box with a local file.
   * @return sha1
  **/
  @Schema(example = "85136C79CBF9FE36BB9D05D0639C70C265C18D37", description = "The SHA1 hash of the file. This can be used to compare the contents of a file on Box with a local file.")
  public String getSha1() {
    return sha1;
  }

  public void setSha1(String sha1) {
    this.sha1 = sha1;
  }

  public File fileVersion(FileVersion fileVersion) {
    this.fileVersion = fileVersion;
    return this;
  }

   /**
   * Get fileVersion
   * @return fileVersion
  **/
  @Schema(description = "")
  public FileVersion getFileVersion() {
    return fileVersion;
  }

  public void setFileVersion(FileVersion fileVersion) {
    this.fileVersion = fileVersion;
  }

  public File versionNumber(String versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * The version number of this file
   * @return versionNumber
  **/
  @Schema(example = "1", description = "The version number of this file")
  public String getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(String versionNumber) {
    this.versionNumber = versionNumber;
  }

  public File commentCount(Integer commentCount) {
    this.commentCount = commentCount;
    return this;
  }

   /**
   * The number of comments on this file
   * @return commentCount
  **/
  @Schema(example = "10", description = "The number of comments on this file")
  public Integer getCommentCount() {
    return commentCount;
  }

  public void setCommentCount(Integer commentCount) {
    this.commentCount = commentCount;
  }

  public File extension(String extension) {
    this.extension = extension;
    return this;
  }

   /**
   * Indicates the (optional) file extension for this file. By default, this is set to an empty string.
   * @return extension
  **/
  @Schema(example = "pdf", description = "Indicates the (optional) file extension for this file. By default, this is set to an empty string.")
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }

  public File isPackage(Boolean isPackage) {
    this.isPackage = isPackage;
    return this;
  }

   /**
   * Indicates if the file is a package. Packages are commonly used by Mac Applications and can include iWork files.
   * @return isPackage
  **/
  @Schema(example = "true", description = "Indicates if the file is a package. Packages are commonly used by Mac Applications and can include iWork files.")
  public Boolean isIsPackage() {
    return isPackage;
  }

  public void setIsPackage(Boolean isPackage) {
    this.isPackage = isPackage;
  }

  public File expiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * When the file will automatically be deleted
   * @return expiresAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "When the file will automatically be deleted")
  public DateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    File file = (File) o;
    return Objects.equals(this.id, file.id) &&
        Objects.equals(this.etag, file.etag) &&
        Objects.equals(this.type, file.type) &&
        Objects.equals(this.description, file.description) &&
        Objects.equals(this.size, file.size) &&
        Objects.equals(this.createdAt, file.createdAt) &&
        Objects.equals(this.modifiedAt, file.modifiedAt) &&
        Objects.equals(this.trashedAt, file.trashedAt) &&
        Objects.equals(this.purgedAt, file.purgedAt) &&
        Objects.equals(this.contentCreatedAt, file.contentCreatedAt) &&
        Objects.equals(this.contentModifiedAt, file.contentModifiedAt) &&
        Objects.equals(this.sharedLink, file.sharedLink) &&
        Objects.equals(this.parent, file.parent) &&
        Objects.equals(this.itemStatus, file.itemStatus) &&
        Objects.equals(this.sequenceId, file.sequenceId) &&
        Objects.equals(this.name, file.name) &&
        Objects.equals(this.sha1, file.sha1) &&
        Objects.equals(this.fileVersion, file.fileVersion) &&
        Objects.equals(this.versionNumber, file.versionNumber) &&
        Objects.equals(this.commentCount, file.commentCount) &&
        Objects.equals(this.extension, file.extension) &&
        Objects.equals(this.isPackage, file.isPackage) &&
        Objects.equals(this.expiresAt, file.expiresAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, etag, type, description, size, createdAt, modifiedAt, trashedAt, purgedAt, contentCreatedAt, contentModifiedAt, sharedLink, parent, itemStatus, sequenceId, name, sha1, fileVersion, versionNumber, commentCount, extension, isPackage, expiresAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class File {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    trashedAt: ").append(toIndentedString(trashedAt)).append("\n");
    sb.append("    purgedAt: ").append(toIndentedString(purgedAt)).append("\n");
    sb.append("    contentCreatedAt: ").append(toIndentedString(contentCreatedAt)).append("\n");
    sb.append("    contentModifiedAt: ").append(toIndentedString(contentModifiedAt)).append("\n");
    sb.append("    sharedLink: ").append(toIndentedString(sharedLink)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    itemStatus: ").append(toIndentedString(itemStatus)).append("\n");
    sb.append("    sequenceId: ").append(toIndentedString(sequenceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sha1: ").append(toIndentedString(sha1)).append("\n");
    sb.append("    fileVersion: ").append(toIndentedString(fileVersion)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    isPackage: ").append(toIndentedString(isPackage)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
