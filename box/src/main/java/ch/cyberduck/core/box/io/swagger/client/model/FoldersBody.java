/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.FoldersParent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * FoldersBody
 */


public class FoldersBody {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("parent")
  private FoldersParent parent = null;

  @JsonProperty("folder_upload_email")
  private Object folderUploadEmail = null;

  /**
   * Specifies whether a folder should be synced to a user&#x27;s device or not. This is used by Box Sync (discontinued) and is not used by Box Drive.
   */
  public enum SyncStateEnum {
    SYNCED("synced"),
    NOT_SYNCED("not_synced"),
    PARTIALLY_SYNCED("partially_synced");

    private String value;

    SyncStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SyncStateEnum fromValue(String text) {
      for (SyncStateEnum b : SyncStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("sync_state")
  private SyncStateEnum syncState = null;

  public FoldersBody name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name for the new folder.  There are some restrictions to the file name. Names containing non-printable ASCII characters, forward and backward slashes (&#x60;/&#x60;, &#x60;\\&#x60;), as well as names with trailing spaces are prohibited.  Additionally, the names &#x60;.&#x60; and &#x60;..&#x60; are not allowed either.
   * @return name
  **/
  @Schema(example = "New Folder", required = true, description = "The name for the new folder.  There are some restrictions to the file name. Names containing non-printable ASCII characters, forward and backward slashes (`/`, `\\`), as well as names with trailing spaces are prohibited.  Additionally, the names `.` and `..` are not allowed either.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FoldersBody parent(FoldersParent parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @Schema(required = true, description = "")
  public FoldersParent getParent() {
    return parent;
  }

  public void setParent(FoldersParent parent) {
    this.parent = parent;
  }

  public FoldersBody folderUploadEmail(Object folderUploadEmail) {
    this.folderUploadEmail = folderUploadEmail;
    return this;
  }

   /**
   * Get folderUploadEmail
   * @return folderUploadEmail
  **/
  @Schema(description = "")
  public Object getFolderUploadEmail() {
    return folderUploadEmail;
  }

  public void setFolderUploadEmail(Object folderUploadEmail) {
    this.folderUploadEmail = folderUploadEmail;
  }

  public FoldersBody syncState(SyncStateEnum syncState) {
    this.syncState = syncState;
    return this;
  }

   /**
   * Specifies whether a folder should be synced to a user&#x27;s device or not. This is used by Box Sync (discontinued) and is not used by Box Drive.
   * @return syncState
  **/
  @Schema(example = "synced", description = "Specifies whether a folder should be synced to a user's device or not. This is used by Box Sync (discontinued) and is not used by Box Drive.")
  public SyncStateEnum getSyncState() {
    return syncState;
  }

  public void setSyncState(SyncStateEnum syncState) {
    this.syncState = syncState;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FoldersBody foldersBody = (FoldersBody) o;
    return Objects.equals(this.name, foldersBody.name) &&
        Objects.equals(this.parent, foldersBody.parent) &&
        Objects.equals(this.folderUploadEmail, foldersBody.folderUploadEmail) &&
        Objects.equals(this.syncState, foldersBody.syncState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, parent, folderUploadEmail, syncState);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FoldersBody {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    folderUploadEmail: ").append(toIndentedString(folderUploadEmail)).append("\n");
    sb.append("    syncState: ").append(toIndentedString(syncState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
